# =================== CONFIGMAP PARA GRAFANA DATASOURCES ===================
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  labels:
    grafana_datasource: "1"
data:
  datasources.yaml: |-
    apiVersion: 1
    datasources:
      - name: TimescaleDB
        type: postgres
        access: proxy
        url: timescaledb:5432
        database: mydb
        user: myuser
        secureJsonData:
          password: mypassword
        jsonData:
          sslmode: "disable"
        isDefault: false
---
# =================== DEPLOYMENT GRAFANA ===================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:11.6.0
        resources:
          requests:
            cpu: 250m
            memory: 64Mi
          limits:
            cpu: 500m
            memory: 1Gi
        ports:
        - containerPort: 3000
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: "admin"
        volumeMounts:
        - name: grafana-provisioning
          mountPath: /etc/grafana/provisioning/datasources
        - name: grafana-storage
          mountPath: /var/lib/grafana
      volumes:
      - name: grafana-provisioning
        configMap:
          name: grafana-datasources
      - name: grafana-storage
        emptyDir: {}
---
# =================== SERVICE GRAFANA ===================
apiVersion: v1
kind: Service
metadata:
  name: grafana
spec:
  selector:
    app: grafana
  ports:
  - protocol: TCP
    port: 3000
    targetPort: 3000
    nodePort: 32000
  type: NodePort
---
# =================== DEPLOYMENT ZOOKEEPER ===================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zookeeper
spec:
  replicas: 1
  selector:
    matchLabels:
      app: zookeeper
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      containers:
      - name: zookeeper
        image: bitnami/zookeeper:3.9.3
        resources:
          requests:
            cpu: 250m
            memory: 64Mi
          limits:
            cpu: 500m
            memory: 1Gi
        ports:
          - containerPort: 2181
        env:
          - name: ALLOW_ANONYMOUS_LOGIN
            value: "yes"
---
# =================== SERVICE ZOOKEEPER ===================
apiVersion: v1
kind: Service
metadata:
  name: zookeeper
spec:
  selector:
    app: zookeeper
  ports:
    - protocol: TCP
      port: 2181
      targetPort: 2181
  type: ClusterIP
---
# =================== DEPLOYMENT KAFKA ===================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      initContainers:
      - name: wait-for-zookeeper
        image: busybox
        command:
          - sh
          - -c
          - "until nc -z zookeeper 2181; do echo 'waiting for zookeeper'; sleep 2; done"
      containers:
      - name: kafka
        image: bitnami/kafka:3.9.0
        resources:
          requests:
            cpu: 250m
            memory: 64Mi
          limits:
            cpu: 500m
            memory: 1Gi
        ports:
        - containerPort: 9092
        env:
        - name: KAFKA_BROKER_ID
          value: "1"
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: "zookeeper:2181"
        - name: ALLOW_PLAINTEXT_LISTENER
          value: "yes"
        - name: KAFKA_LISTENERS
          value: "PLAINTEXT://0.0.0.0:9092"
        - name: KAFKA_ADVERTISED_LISTENERS
          value: "PLAINTEXT://kafka:9092"
        - name: KAFKA_AUTO_CREATE_TOPICS_ENABLE
          value: "true"
---
# ========================= SERVICE KAFKA ==========================
apiVersion: v1
kind: Service
metadata:
  name: kafka
spec:
  selector:
    app: kafka
  ports:
    - protocol: TCP
      port: 9092
      targetPort: 9092
  type: ClusterIP
---
# =================== DEPLOYMENT KAFKA PRODUCER ===================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-producer
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka-producer
  template:
    metadata:
      labels:
        app: kafka-producer
    spec:
      containers:
      - name: kafka-producer
        image: laquin/kafka_producer:latest
        resources:
          requests:
            cpu: 250m
            memory: 64Mi
          limits:
            cpu: 500m
            memory: 1Gi
        env:
          - name: KAFKA_BOOTSTRAP_SERVERS
            value: "kafka:9092"
---
# =================== SERVICE KAFKA PRODUCER GATEWAY ===================
apiVersion: v1
kind: Service
metadata:
  name: kafka-producer
spec:
  selector:
    app: kafka-producer
  ports:
  - protocol: TCP
    port: 5001
    targetPort: 5001
  type: LoadBalancer
---
# =================== DEPLOYMENT SPARK CONSUMER ===================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: spark-consumer
spec:
  replicas: 1
  selector:
    matchLabels:
      app: spark-consumer
  template:
    metadata:
      labels:
        app: spark-consumer
    spec:
      containers:
      - name: spark-consumer
        image: laquin/spark_consumer:latest
        resources:
          requests:
            cpu: 250m
            memory: 64Mi
          limits:
            cpu: 500m
            memory: 1Gi
        env:
          - name: SPARK_MODE
            value: "master"
          - name: SPARK_JARS_DIR
            value: "/opt/spark"
          - name: KAFKA_BOOTSTRAP_SERVERS
            value: "kafka:9092"
        ports:
          - containerPort: 8080
          - containerPort: 7077
---
# =================== PVC TIMESCALEDB ===================
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: timescaledb-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      cpu: 250m
      memory: 1Gi
      storage: 1Gi
  storageClassName: standard-rwo
---
# =================== DEPLOYMENT TIMESCALEDB ===================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: timescaledb
spec:
  replicas: 1
  selector:
    matchLabels:
      app: timescaledb
  template:
    metadata:
      labels:
        app: timescaledb
    spec:
      containers:
      - name: timescaledb
        image: timescale/timescaledb:latest-pg14
        resources:
          requests:
            cpu: 250m
            memory: 512Mi
          limits:
            cpu: 500m
            memory: 1Gi
        ports:
          - containerPort: 5432
        env:
          - name: POSTGRES_DB
            value: "mydb"
          - name: POSTGRES_USER
            value: "myuser"
          - name: POSTGRES_PASSWORD
            value: "mypassword"
          - name: PGDATA
            value: /var/lib/postgresql/data/pgdata
        volumeMounts:
          - name: timescaledb-data
            mountPath: /var/lib/postgresql
      volumes:
        - name: timescaledb-data
          persistentVolumeClaim:
            claimName: timescaledb-pvc
---
# =================== SERVICE TIMESCALEDB ===================
apiVersion: v1
kind: Service
metadata:
  name: timescaledb
spec:
  selector:
    app: timescaledb
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432
  type: ClusterIP
---
# =================== DEPLOYMENT API GATEWAY ===================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: api
  template:
    metadata:
      labels:
        app: api
    spec:
      containers:
      - name: api
        image: laquin/api:latest
        resources:
          requests:
            cpu: 250m
            memory: 64Mi
          limits:
            cpu: 500m
            memory: 1Gi
        ports:
        - containerPort: 5000
        env:
        - name: DB_HOST
          value: "timescaledb"
        - name: DB_PORT
          value: "5432"
        - name: DB_NAME
          value: "mydb"
        - name: DB_USER
          value: "myuser"
        - name: DB_PASSWORD
          value: "mypassword"
---
# =================== SERVICE API GATEWAY ===================
apiVersion: v1
kind: Service
metadata:
  name: api
spec:
  selector:
    app: api
  ports:
  - protocol: TCP
    port: 5000
    targetPort: 5000
  type: LoadBalancer

